#cloud-config
# MSP Client VM Bootstrap Configuration
# Generated by Terraform for client: ${client_name}

hostname: msp-${client_id}

users:
  - name: admin
    groups: [wheel, sudo]
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    shell: /bin/bash
%{ if ssh_ca_public_key != "" ~}
    ssh_authorized_keys:
      - ${ssh_ca_public_key}
%{ endif ~}

packages:
  - curl
  - git
  - htop
  - vim
  - nmap
  - tcpdump

package_update: true
package_upgrade: true

write_files:
  # MSP Configuration
  - path: /etc/msp/config.yaml
    owner: root:root
    permissions: '0600'
    content: |
      client_id: ${client_id}
      client_name: ${client_name}
      environment: production

      mcp_server:
        url: ${mcp_server_url}
        api_key_secret_arn: ${api_key_secret_arn}

      event_queue:
        url: ${event_queue_url}
        stream_prefix: "tenant:${client_id}"

      flake:
        git_url: ${flake_git_url}
        ref: ${flake_ref}

      security:
        enable_encryption: ${enable_encryption}
        ssh_ca_public_key: ${ssh_ca_public_key}

      discovery:
        enabled: ${enable_discovery}
        subnets: ${subnets_to_discover}

  # Nix installation script
  - path: /tmp/install-nix.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      set -euo pipefail

      echo "Installing Nix package manager..."

      # Install Nix (multi-user mode)
      sh <(curl -L https://nixos.org/nix/install) --daemon --yes

      # Enable flakes and nix-command
      mkdir -p /etc/nix
      cat > /etc/nix/nix.conf <<EOF
      experimental-features = nix-command flakes
      max-jobs = auto
      trusted-users = root admin
      EOF

      # Restart nix-daemon
      systemctl restart nix-daemon || true

      echo "Nix installation complete"

  # MSP watcher bootstrap script
  - path: /tmp/bootstrap-watcher.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      set -euo pipefail

      echo "Bootstrapping MSP watcher..."

      # Source Nix
      . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh

      # Fetch MCP API key from Secrets Manager
      echo "Fetching API key from Secrets Manager..."
      API_KEY=$(aws secretsmanager get-secret-value \
        --secret-id ${api_key_secret_arn} \
        --query SecretString \
        --output text | jq -r .api_key)

      if [ -z "$API_KEY" ]; then
        echo "ERROR: Failed to fetch API key"
        exit 1
      fi

      # Create watcher configuration
      mkdir -p /var/lib/msp-watcher
      cat > /var/lib/msp-watcher/config.json <<EOF
      {
        "client_id": "${client_id}",
        "mcp_server_url": "${mcp_server_url}",
        "event_queue_url": "${event_queue_url}",
        "api_key": "$API_KEY",
        "flake": {
          "git_url": "${flake_git_url}",
          "ref": "${flake_ref}"
        }
      }
      EOF
      chmod 600 /var/lib/msp-watcher/config.json

      # Install watcher from flake
      echo "Installing watcher from flake..."
      nix profile install "${flake_git_url}#watcher"

      # Create systemd service
      cat > /etc/systemd/system/msp-watcher.service <<EOF
      [Unit]
      Description=MSP Log Watcher & Event Publisher
      After=network-online.target
      Wants=network-online.target

      [Service]
      Type=simple
      User=root
      WorkingDirectory=/var/lib/msp-watcher
      ExecStart=/nix/var/nix/profiles/default/bin/msp-watcher
      Restart=always
      RestartSec=10

      # Security hardening
      NoNewPrivileges=true
      PrivateTmp=true
      ProtectSystem=strict
      ProtectHome=true
      ReadWritePaths=/var/lib/msp-watcher /var/log

      # Environment
      Environment="MSP_CONFIG=/var/lib/msp-watcher/config.json"

      [Install]
      WantedBy=multi-user.target
      EOF

      # Enable and start service
      systemctl daemon-reload
      systemctl enable msp-watcher
      systemctl start msp-watcher

      echo "MSP watcher bootstrap complete"

%{ if enable_discovery ~}
  # Network discovery bootstrap script
  - path: /tmp/bootstrap-discovery.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      set -euo pipefail

      echo "Bootstrapping network discovery..."

      # Source Nix
      . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh

      # Install discovery service from flake
      echo "Installing discovery service..."
      nix profile install "${flake_git_url}#discovery-service"

      # Create discovery configuration
      mkdir -p /etc/msp-discovery
      cat > /etc/msp-discovery/config.yaml <<EOF
      client_id: ${client_id}
      subnets: ${subnets_to_discover}
      scan_interval: 3600
      mcp_server_url: ${mcp_server_url}

      methods:
        - active_nmap
        - passive_arp
        - snmp_walk

      enrollment:
        auto_enroll_tiers: [1, 2]
        excluded_types:
          - windows_workstation
          - macos_workstation
          - printer
      EOF

      # Create systemd service
      cat > /etc/systemd/system/msp-discovery.service <<EOF
      [Unit]
      Description=MSP Network Discovery Service
      After=network-online.target msp-watcher.service
      Wants=network-online.target

      [Service]
      Type=simple
      User=root
      ExecStart=/nix/var/nix/profiles/default/bin/msp-discovery
      Restart=always
      RestartSec=60

      # Security
      NoNewPrivileges=true
      PrivateTmp=true

      # Environment
      Environment="MSP_CONFIG=/etc/msp-discovery/config.yaml"

      # Capabilities for network scanning
      AmbientCapabilities=CAP_NET_RAW CAP_NET_ADMIN

      [Install]
      WantedBy=multi-user.target
      EOF

      # Enable and start service
      systemctl daemon-reload
      systemctl enable msp-discovery
      systemctl start msp-discovery

      echo "Network discovery bootstrap complete"
%{ endif ~}

%{ if enable_encryption ~}
  # LUKS encryption setup (for future use)
  - path: /tmp/setup-encryption.sh
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      # LUKS encryption setup
      # This is a placeholder for full-disk encryption configuration
      # In production, this would be handled during initial provisioning

      echo "LUKS encryption configuration placeholder"
      echo "Full-disk encryption should be configured during initial provisioning"
%{ endif ~}

  # CloudWatch agent configuration
  - path: /opt/aws/amazon-cloudwatch-agent/etc/config.json
    owner: root:root
    permissions: '0644'
    content: |
      {
        "agent": {
          "metrics_collection_interval": 60,
          "run_as_user": "root"
        },
        "logs": {
          "logs_collected": {
            "files": {
              "collect_list": [
                {
                  "file_path": "/var/log/msp-watcher.log",
                  "log_group_name": "/msp/${client_id}/watcher",
                  "log_stream_name": "{instance_id}"
                },
                {
                  "file_path": "/var/log/msp-discovery.log",
                  "log_group_name": "/msp/${client_id}/discovery",
                  "log_stream_name": "{instance_id}"
                },
                {
                  "file_path": "/var/log/syslog",
                  "log_group_name": "/msp/${client_id}/syslog",
                  "log_stream_name": "{instance_id}"
                }
              ]
            }
          }
        },
        "metrics": {
          "namespace": "MSP/ClientVM",
          "metrics_collected": {
            "cpu": {
              "measurement": [
                {"name": "cpu_usage_idle", "rename": "CPU_IDLE", "unit": "Percent"},
                {"name": "cpu_usage_iowait", "rename": "CPU_IOWAIT", "unit": "Percent"}
              ],
              "totalcpu": false
            },
            "disk": {
              "measurement": [
                {"name": "used_percent", "rename": "DISK_USED", "unit": "Percent"}
              ],
              "resources": ["/", "/var"]
            },
            "mem": {
              "measurement": [
                {"name": "mem_used_percent", "rename": "MEM_USED", "unit": "Percent"}
              ]
            }
          }
        }
      }

runcmd:
  # Install AWS CLI (if not present)
  - |
    if ! command -v aws &> /dev/null; then
      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
      unzip -q /tmp/awscliv2.zip -d /tmp
      /tmp/aws/install
      rm -rf /tmp/aws /tmp/awscliv2.zip
    fi

  # Install CloudWatch agent
  - |
    if [ ! -f /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent ]; then
      wget -q https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
      rpm -U ./amazon-cloudwatch-agent.rpm || yum install -y ./amazon-cloudwatch-agent.rpm
      rm -f amazon-cloudwatch-agent.rpm
    fi

  # Start CloudWatch agent
  - /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/config.json

  # Install Nix
  - /tmp/install-nix.sh 2>&1 | tee /var/log/nix-install.log

  # Bootstrap MSP watcher
  - sleep 10  # Wait for Nix installation to settle
  - /tmp/bootstrap-watcher.sh 2>&1 | tee /var/log/msp-watcher-bootstrap.log

%{ if enable_discovery ~}
  # Bootstrap network discovery
  - /tmp/bootstrap-discovery.sh 2>&1 | tee /var/log/msp-discovery-bootstrap.log
%{ endif ~}

  # Set timezone to UTC
  - timedatectl set-timezone UTC

  # Configure NTP
  - |
    cat > /etc/chrony/chrony.conf <<EOF
    server 169.254.169.123 prefer iburst minpoll 4 maxpoll 4
    pool pool.ntp.org iburst
    driftfile /var/lib/chrony/drift
    makestep 1.0 3
    rtcsync
    logdir /var/log/chrony
    EOF
    systemctl restart chronyd

  # Final health check
  - |
    sleep 30
    echo "=== MSP Client VM Bootstrap Complete ==="
    echo "Client ID: ${client_id}"
    echo "Client Name: ${client_name}"
    echo "MCP Server: ${mcp_server_url}"
    echo "Event Queue: ${event_queue_url}"
    echo ""
    echo "Services status:"
    systemctl status msp-watcher --no-pager || true
%{ if enable_discovery ~}
    systemctl status msp-discovery --no-pager || true
%{ endif ~}
    echo ""
    echo "Bootstrap complete!"

final_message: |
  MSP Client VM is ready!
  Client: ${client_name} (${client_id})

  Services:
  - MSP Watcher: Active
%{ if enable_discovery ~}
  - Network Discovery: Active
%{ endif ~}

  Configuration: /etc/msp/config.yaml
  Logs: /var/log/msp-*.log

  To connect: ssh admin@$INSTANCE_IP
